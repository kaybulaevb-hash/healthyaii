const { Telegraf } = require('telegraf');
const ExcelParser = require('./excel-parser');
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è Railway
const KVStorage = process.env.RAILWAY_ENVIRONMENT ? 
  require('./simple-storage') : 
  require('./kv-storage');
const OpenAIService = require('./openai-service');

class MealBot {
  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_TOKEN);
    this.excelParser = new ExcelParser();
    this.kvStorage = new KVStorage();
    this.openaiService = new OpenAIService();
    this.maxDay = 15;
    
    this.setupCommands();
    this.setupMiddleware();
  }

  setupMiddleware() {
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      await next();
      const ms = Date.now() - start;
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${ms}ms`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.kvStorage.incrementUserUsage(ctx.chat.id);
    });
  }

  setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      const welcomeMessage = `
üçΩÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç–∞ –ü–ª–∞–Ω–∞ –ü–∏—Ç–∞–Ω–∏—è!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ 15-–¥–Ω–µ–≤–Ω—ã–º –ø–ª–∞–Ω–æ–º –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /today - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
‚Ä¢ /day N - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–Ω—å N (1-15)
‚Ä¢ /day N m1 - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫ –¥–Ω—è N
‚Ä¢ /day N m2 - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–µ–¥ –¥–Ω—è N
‚Ä¢ /day N m3 - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–¥–Ω–∏–∫ –¥–Ω—è N
‚Ä¢ /day N m4 - –ø–æ–∫–∞–∑–∞—Ç—å —É–∂–∏–Ω –¥–Ω—è N
‚Ä¢ /next - —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
‚Ä¢ /prev - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
‚Ä¢ /tip - —Å–æ–≤–µ—Ç –¥–Ω—è

<b>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /today</b>
      `;

      await ctx.reply(welcomeMessage, { parse_mode: 'HTML' });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.kvStorage.updateBotStats(true, false);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /today
    this.bot.command('today', async (ctx) => {
      const currentDay = await this.kvStorage.getUserCurrentDay(ctx.chat.id);
      await this.showDayOverview(ctx, currentDay);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /day
    this.bot.command('day', async (ctx) => {
      const args = ctx.message.text.split(' ');
      if (args.length < 2) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /day N –∏–ª–∏ /day N m1');
      }

      const day = parseInt(args[1]);
      if (isNaN(day) || day < 1 || day > this.maxDay) {
        return ctx.reply(`–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ ${this.maxDay}`);
      }

      if (args.length === 2) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä –¥–Ω—è
        await this.showDayOverview(ctx, day);
      } else if (args.length === 3) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏
        const meal = args[2].toUpperCase();
        if (!['M1', 'M2', 'M3', 'M4'].includes(meal)) {
          return ctx.reply('–ü—Ä–∏–µ–º –ø–∏—â–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: m1, m2, m3 –∏–ª–∏ m4');
        }
        await this.showMealDetails(ctx, day, meal);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /next
    this.bot.command('next', async (ctx) => {
      const currentDay = await this.kvStorage.getUserCurrentDay(ctx.chat.id);
      const nextDay = currentDay >= this.maxDay ? 1 : currentDay + 1;
      await this.kvStorage.setUserCurrentDay(ctx.chat.id, nextDay);
      await this.showDayOverview(ctx, nextDay);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /prev
    this.bot.command('prev', async (ctx) => {
      const currentDay = await this.kvStorage.getUserCurrentDay(ctx.chat.id);
      const prevDay = currentDay <= 1 ? this.maxDay : currentDay - 1;
      await this.kvStorage.setUserCurrentDay(ctx.chat.id, prevDay);
      await this.showDayOverview(ctx, prevDay);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /tip
    this.bot.command('tip', async (ctx) => {
      const currentDay = await this.kvStorage.getUserCurrentDay(ctx.chat.id);
      const dayData = this.excelParser.getDayData(currentDay);
      
      if (!dayData) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è');
      }

      const tip = await this.openaiService.generateCookingTip(currentDay, dayData);
      await ctx.reply(tip, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const text = ctx.message.text.toLowerCase();
      
      if (text.includes('–¥–µ–Ω—å') || text.includes('day')) {
        const dayMatch = text.match(/(\d+)/);
        if (dayMatch) {
          const day = parseInt(dayMatch[1]);
          if (day >= 1 && day <= this.maxDay) {
            await this.showDayOverview(ctx, day);
            return;
          }
        }
      }

      // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω—É –ø–∏—Ç–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
    });
  }

  async showDayOverview(ctx, day) {
    const dayData = this.excelParser.getDayData(day);
    if (!dayData) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è');
    }

    const message = `
üìÖ <b>–î–µ–Ω—å ${day}</b>

üç≥ <b>–ó–∞–≤—Ç—Ä–∞–∫ (M1):</b> ${dayData.M1.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçΩÔ∏è <b>–û–±–µ–¥ (M2):</b> ${dayData.M2.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚òï <b>–ü–æ–ª–¥–Ω–∏–∫ (M3):</b> ${dayData.M3.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üåô <b>–£–∂–∏–Ω (M4):</b> ${dayData.M4.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /day ${day} m1, /day ${day} m2 –∏ —Ç.–¥. –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</i>
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data: `prev_${day}` },
          { text: '–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data: `next_${day}` }
        ],
        [
          { text: 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫', callback_data: `meal_${day}_M1` },
          { text: 'üçΩÔ∏è –û–±–µ–¥', callback_data: `meal_${day}_M2` }
        ],
        [
          { text: '‚òï –ü–æ–ª–¥–Ω–∏–∫', callback_data: `meal_${day}_M3` },
          { text: 'üåô –£–∂–∏–Ω', callback_data: `meal_${day}_M4` }
        ],
        [
          { text: 'üí° –°–æ–≤–µ—Ç –¥–Ω—è', callback_data: `tip_${day}` }
        ]
      ]
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  }

  async showMealDetails(ctx, day, meal) {
    const mealData = this.excelParser.getMealData(day, meal);
    if (!mealData || !mealData.name) {
      return ctx.reply('–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    const mealNames = {
      'M1': '–ó–∞–≤—Ç—Ä–∞–∫',
      'M2': '–û–±–µ–¥',
      'M3': '–ü–æ–ª–¥–Ω–∏–∫',
      'M4': '–£–∂–∏–Ω'
    };

    let message = `
üçΩÔ∏è <b>${mealNames[meal]} - –î–µ–Ω—å ${day}</b>

<b>–ë–ª—é–¥–æ:</b> ${mealData.name}
    `;

    if (mealData.ingredients) {
      message += `\n\n<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n${mealData.ingredients}`;
    }

    if (mealData.recipe) {
      message += `\n\n<b>–†–µ—Ü–µ–ø—Ç:</b>\n${mealData.recipe}`;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–Ω—é', callback_data: `day_${day}` }
        ],
        [
          { text: 'üí° –°–æ–≤–µ—Ç –¥–Ω—è', callback_data: `tip_${day}` }
        ]
      ]
    };

    await ctx.reply(message, { 
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
  setupCallbacks() {
    this.bot.action(/prev_(.+)/, async (ctx) => {
      const day = parseInt(ctx.match[1]);
      const prevDay = day <= 1 ? this.maxDay : day - 1;
      await this.kvStorage.setUserCurrentDay(ctx.chat.id, prevDay);
      await this.showDayOverview(ctx, prevDay);
      await ctx.answerCbQuery();
    });

    this.bot.action(/next_(.+)/, async (ctx) => {
      const day = parseInt(ctx.match[1]);
      const nextDay = day >= this.maxDay ? 1 : day + 1;
      await this.kvStorage.setUserCurrentDay(ctx.chat.id, nextDay);
      await this.showDayOverview(ctx, nextDay);
      await ctx.answerCbQuery();
    });

    this.bot.action(/meal_(.+)_(.+)/, async (ctx) => {
      const day = parseInt(ctx.match[1]);
      const meal = ctx.match[2];
      await this.showMealDetails(ctx, day, meal);
      await ctx.answerCbQuery();
    });

    this.bot.action(/day_(.+)/, async (ctx) => {
      const day = parseInt(ctx.match[1]);
      await this.showDayOverview(ctx, day);
      await ctx.answerCbQuery();
    });

    this.bot.action(/tip_(.+)/, async (ctx) => {
      const day = parseInt(ctx.match[1]);
      const dayData = this.excelParser.getDayData(day);
      
      if (dayData) {
        const tip = await this.openaiService.generateCookingTip(day, dayData);
        await ctx.reply(tip, { parse_mode: 'HTML' });
      }
      
      await ctx.answerCbQuery();
    });
  }

  async initialize() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
      const loaded = await this.excelParser.loadExcelFile();
      if (!loaded) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª');
        return false;
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupCallbacks();

      console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      return false;
    }
  }

  getBot() {
    return this.bot;
  }
}

module.exports = MealBot;
